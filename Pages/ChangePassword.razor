@page "/changePassword"
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient Http

<PageTitle>Change Password</PageTitle>

<div class="password-change-container">
    <div class="password-header">
        <h2>Change Password</h2>
        <p>Update your account password</p>
    </div>

    <div class="password-form-container">
        <EditForm Model="@PasswordModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-section">
                <!-- Current Password -->
                <div class="form-group">
                    <label for="currentPassword">Current Password</label>
                    <div class="input-group">
                        <InputText id="currentPassword" @bind-Value="PasswordModel.CurrentPassword"
                                   type="@(showCurrentPassword ? "text" : "password")"
                                   class="form-control" />
                        <button type="button" class="btn btn-outline-secondary"
                                @onclick="ToggleShowCurrentPassword">
                            <i class="@(showCurrentPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => PasswordModel.CurrentPassword)" />
                </div>

                <!-- New Password -->
                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <div class="input-group">
                        <InputText id="newPassword" @bind-Value="PasswordModel.NewPassword"
                                   type="@(showNewPassword ? "text" : "password")"
                                   class="form-control" />
                        <button type="button" class="btn btn-outline-secondary"
                                @onclick="ToggleShowNewPassword">
                            <i class="@(showNewPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => PasswordModel.NewPassword)" />
                    <small class="text-muted">Must be at least 8 characters long</small>
                </div>

                <!-- Confirm Password -->
                <div class="form-group">
                    <label for="confirmPassword">Confirm New Password</label>
                    <div class="input-group">
                        <InputText id="confirmPassword" @bind-Value="PasswordModel.ConfirmPassword"
                                   type="@(showConfirmPassword ? "text" : "password")"
                                   class="form-control" />
                        <button type="button" class="btn btn-outline-secondary"
                                @onclick="ToggleShowConfirmPassword">
                            <i class="@(showConfirmPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => PasswordModel.ConfirmPassword)" />
                </div>

                <!-- Password Requirements -->
                <div class="password-requirements">
                    <h6>Password Requirements:</h6>
                    <ul>
                        <li class="@(HasMinLength ? "text-success" : "text-muted")">
                            <i class="@(HasMinLength ? "fas fa-check-circle" : "far fa-circle")"></i>
                            Minimum 8 characters
                        </li>
                        <li class="@(HasUpperCase ? "text-success" : "text-muted")">
                            <i class="@(HasUpperCase ? "fas fa-check-circle" : "far fa-circle")"></i>
                            At least one uppercase letter
                        </li>
                        <li class="@(HasNumber ? "text-success" : "text-muted")">
                            <i class="@(HasNumber ? "fas fa-check-circle" : "far fa-circle")"></i>
                            At least one number
                        </li>
                        <li class="@(HasSpecialChar ? "text-success" : "text-muted")">
                            <i class="@(HasSpecialChar ? "fas fa-check-circle" : "far fa-circle")"></i>
                            At least one special character
                        </li>
                    </ul>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" disabled="@(!IsFormValid)">
                        <i class="fas fa-key me-2"></i>Change Password
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                        Cancel
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .password-change-container {
        max-width: 600px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .password-header {
        text-align: center;
        margin-bottom: 2rem;
    }

        .password-header h2 {
            font-weight: 600;
            color: var(--bs-body-color);
        }

    .password-form-container {
        background-color: var(--bs-body-bg);
        border-radius: 0.5rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        padding: 2rem;
    }

    .form-section {
        display: grid;
        gap: 1.5rem;
    }

    .form-group label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        display: block;
    }

    .input-group button {
        border-left: none;
    }

    .password-requirements {
        background-color: var(--bs-tertiary-bg);
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }

        .password-requirements ul {
            list-style: none;
            padding-left: 0;
            margin-bottom: 0;
        }

        .password-requirements li {
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1rem;
    }

    @@media (max-width: 576px) {
        .password-form-container {
            padding: 1.5rem;
        }

        .form-actions {
            flex-direction: column;
        }

            .form-actions button {
                width: 100%;
            }
    }
</style>

@code {
    private PasswordModel PasswordModel = new();
    private bool showCurrentPassword = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    // Password validation properties
    private bool HasMinLength => PasswordModel.NewPassword?.Length >= 8;
    private bool HasUpperCase => !string.IsNullOrEmpty(PasswordModel.NewPassword) &&
                               PasswordModel.NewPassword.Any(char.IsUpper);
    private bool HasNumber => !string.IsNullOrEmpty(PasswordModel.NewPassword) &&
                             PasswordModel.NewPassword.Any(char.IsDigit);
    private bool HasSpecialChar => !string.IsNullOrEmpty(PasswordModel.NewPassword) &&
                                  PasswordModel.NewPassword.Any(c => !char.IsLetterOrDigit(c));

    private bool IsFormValid => HasMinLength && HasUpperCase && HasNumber && HasSpecialChar &&
                              PasswordModel.NewPassword == PasswordModel.ConfirmPassword;

    private void ToggleShowCurrentPassword() => showCurrentPassword = !showCurrentPassword;
    private void ToggleShowNewPassword() => showNewPassword = !showNewPassword;
    private void ToggleShowConfirmPassword() => showConfirmPassword = !showConfirmPassword;

    private async Task HandleValidSubmit()
    {
        try
        {
            // Call your API to change password
            // var response = await Http.PostAsJsonAsync("api/account/change-password", PasswordModel);

            // For demo purposes, we'll just show a success message
            await JSRuntime.InvokeVoidAsync("alert", "Password changed successfully!");

            // Clear the form
            PasswordModel = new PasswordModel();

            // Optionally log the user out and redirect to login
            // await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
            // Navigation.NavigateTo("/login");

            // Or just go back to profile
            Navigation.NavigateTo("/account/editprofile");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error changing password: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/account/editprofile");
    }

    public class PasswordModel
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "New password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your new password")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}