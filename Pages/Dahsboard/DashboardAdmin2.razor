@page "/dashboard/secondadmin"
@layout MainLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject GEMS.Services.UserServices UserServices
@implements IDisposable

<div class="dashboard-header">
    <h3 class="dashboard-title">Dashboard</h3>
    <p class="welcome-message">Welcome back, <span class="text-primary">@userName</span></p>
</div>

<div class="dashboard-container px-4 pb-4">
    <!-- Stats Cards -->
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body p-3">
                    <h6 class="card-subtitle mb-1">Total Users</h6>
                    <h4 class="card-title mb-0">@totalUsers</h4>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-dark clickable-card" @onclick="NavigateToApprovals">
                <div class="card-body p-3">
                    <h6 class="card-subtitle mb-1">Pending Approvals</h6>
                    <h4 class="card-title mb-0">@pendingUsers</h4>
                    <small class="d-block mt-1">Click to view all</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body p-3">
                    <h6 class="card-subtitle mb-1">Approved Today</h6>
                    <h4 class="card-title mb-0">@approvedToday</h4>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body p-3">
                    <h6 class="card-subtitle mb-1">Rejected Today</h6>
                    <h4 class="card-title mb-0">@rejectedToday</h4>
                </div>
            </div>
        </div>
    </div>

    <!-- Pending Approvals Section -->
    <div class="card mb-4">
        <div class="card-header bg-white d-flex justify-content-between align-items-center">
            <div>
                <h5 class="mb-0">📥 Pending Registration Requests</h5>
                <small class="text-muted">Showing @Math.Min(3, pendingUserList?.Count ?? 0) of @pendingUsers pending requests</small>
            </div>
            <div>
                <button class="btn btn-sm btn-outline-primary me-2" @onclick="RefreshPendingUsers">
                    <i class="fas fa-sync-alt me-1"></i> Refresh
                </button>
                <button class="btn btn-sm btn-primary" @onclick="NavigateToApprovals">
                    <i class="fas fa-list me-1"></i> View All
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (pendingUserList == null || !pendingUserList.Any())
            {
                <div class="text-center p-4 text-muted">
                    No pending registration requests
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-sm table-hover mb-0">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Registered On</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in pendingUserList.Take(3))
                            {
                                <tr>
                                    <td>@user.FullName</td>
                                    <td>@user.Email</td>
                                    <td>@user.RegisteredDate.ToString("dd MMM yyyy")</td>
                                    <td>
                                        <button class="btn btn-sm btn-success me-1" @onclick="() => ApproveUser(user.Id)" disabled="@isProcessing">
                                            <i class="fas fa-check"></i> Approve
                                        </button>
                                        <button class="btn btn-sm btn-danger me-1" @onclick="() => RejectUser(user.Id)" disabled="@isProcessing">
                                            <i class="fas fa-times"></i> Reject
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => ViewDetails(user.Id)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                            @if (pendingUserList.Count > 3)
                            {
                                <tr class="text-center">
                                    <td colspan="4" class="py-2">
                                        <button class="btn btn-sm btn-link" @onclick="NavigateToApprovals">
                                            View all @pendingUsers pending requests <i class="fas fa-arrow-right ms-1"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <!-- Recent Activity Section -->
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">📂 Recent Approval Activities</h5>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshActivities" disabled="@isProcessing">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                <div class="card-body p-0">
                    <ul class="list-group list-group-flush">
                        @if (isLoading)
                        {
                            <li class="list-group-item py-2 text-center">
                                <div class="spinner-border spinner-border-sm text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </li>
                        }
                        else if (recentActivities == null || !recentActivities.Any())
                        {
                            <li class="list-group-item py-2 text-muted text-center">
                                No recent activities
                            </li>
                        }
                        else
                        {
                            @foreach (var activity in recentActivities.Take(5))
                            {
                                <li class="list-group-item py-2">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <span class="badge bg-@GetActivityBadgeClass(activity.ActionType) me-2">
                                                @activity.ActionType
                                            </span>
                                            @activity.Message
                                        </div>
                                        <small class="text-muted">@activity.Timestamp.ToString("hh:mm tt")</small>
                                    </div>
                                </li>
                            }
                            <li class="list-group-item py-2 text-center">
                                <button class="btn btn-sm btn-link" @onclick="NavigateToActivityLog">
                                    View full activity log <i class="fas fa-arrow-right ms-1"></i>
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Quick Actions</h5>
                </div>
                <div class="card-body p-2">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary btn-sm" @onclick="NavigateToApprovals">
                            <i class="fas fa-user-check me-1"></i> Manage Approvals
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="ExportApprovals">
                            <i class="fas fa-file-export me-1"></i> Export Approvals
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="NavigateToAdmin1Dashboard">
                            <i class="fas fa-exchange-alt me-1"></i> Switch to Admin1
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Local model classes
    private class LocalPendingUser
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public DateTime RegisteredDate { get; set; }
    }

    private class LocalActivityLog
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
        public string ActionType { get; set; } = string.Empty;
    }

    // Component state
    private string? userName;
    private int totalUsers;
    private int pendingUsers;
    private int approvedToday;
    private int rejectedToday;
    private List<LocalPendingUser>? pendingUserList;
    private List<LocalActivityLog>? recentActivities;
    private bool isLoading = true;
    private bool isProcessing;
    private Timer? autoRefreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await LoadDashboardData();
        autoRefreshTimer = new Timer(async _ => await InvokeAsync(RefreshData), null, 60000, 60000);
    }

    private async Task LoadUserData()
    {
        try
        {
            var email = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userEmail");
            var user = UserServices.GetUserByEmail(email);
            userName = user?.Fullname ?? email;
        }
        catch
        {
            userName = "Administrator";
        }
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Load counts
            totalUsers = UserServices.GetTotalUserCount();
            pendingUsers = UserServices.GetPendingUserCount();
            approvedToday = UserServices.GetTodayApprovedCount();

            // Calculate rejected today
            rejectedToday = UserServices.GetAllUsers()
                .Count(u => u.Status == GEMS.Services.UserStatus.Rejected && 
                           u.ApprovalDate?.Date == DateTime.Today);

            // Convert pending users
            var servicePendingUsers = UserServices.GetPendingUsers();
            pendingUserList = servicePendingUsers.Select(u => new LocalPendingUser
            {
                Id = u.Id,
                FullName = u.FullName,
                Email = u.Email,
                RegisteredDate = u.RegisteredDate
            }).ToList();

            // Convert activity logs
            var serviceActivities = UserServices.GetRecentApprovalActivities();
            recentActivities = serviceActivities.Select(a => new LocalActivityLog
            {
                Timestamp = a.Timestamp,
                Message = a.Message,
                ActionType = a.ActivityType.ToString()
            }).ToList();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
    }

    private async Task RefreshPendingUsers()
    {
        isProcessing = true;
        StateHasChanged();
        await Task.Delay(1); // Ensure UI updates

        try
        {
            pendingUserList = null;
            pendingUsers = UserServices.GetPendingUserCount();
            var servicePendingUsers = UserServices.GetPendingUsers();
            pendingUserList = servicePendingUsers.Select(u => new LocalPendingUser
            {
                Id = u.Id,
                FullName = u.FullName,
                Email = u.Email,
                RegisteredDate = u.RegisteredDate
            }).ToList();
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task RefreshActivities()
    {
        isProcessing = true;
        StateHasChanged();
        await Task.Delay(1); // Ensure UI updates

        try
        {
            var serviceActivities = UserServices.GetRecentApprovalActivities();
            recentActivities = serviceActivities.Select(a => new LocalActivityLog
            {
                Timestamp = a.Timestamp,
                Message = a.Message,
                ActionType = a.ActivityType.ToString()
            }).ToList();
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ApproveUser(int userId)
    {
        isProcessing = true;
        StateHasChanged();

        try
        {
            var result = UserServices.ApproveUser(userId);
            if (result)
            {
                await LoadDashboardData();
                // Add toast notification here if needed
            }
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task RejectUser(int userId)
    {
        isProcessing = true;
        StateHasChanged();

        try
        {
            var result = UserServices.RejectUser(userId);
            if (result)
            {
                await LoadDashboardData();
                // Add toast notification here if needed
            }
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void ViewDetails(int userId)
    {
        Navigation.NavigateTo($"/user/approval-details/{userId}");
    }

    private void NavigateToApprovals()
    {
        Navigation.NavigateTo("/admin/approvals");
    }

    private void NavigateToActivityLog()
    {
        Navigation.NavigateTo("/admin/activity-log");
    }

    private void NavigateToAdmin1Dashboard()
    {
        Navigation.NavigateTo("/dashboard/firstadmin");
    }

    private async Task ExportApprovals()
    {
        // Implement export logic
        await JSRuntime.InvokeVoidAsync("alert", "Export feature coming soon!");
    }

    private string GetActivityBadgeClass(string actionType)
    {
        return actionType switch
        {
            "Approval" => "success",
            "Rejection" => "danger",
            "Registration" => "primary",
            _ => "secondary"
        };
    }

    public void Dispose()
    {
        autoRefreshTimer?.Dispose();
    }
}