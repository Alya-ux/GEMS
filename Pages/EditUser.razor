@page "/users/edit/{UserId:int}"
@layout MainLayout
@inject UserServices UserService
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<div class="edit-container">
    <h3>Edit User <span class="text-muted">#@editModel?.UserId</span></h3>

    <EditForm Model="@editModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-card">
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">
                    @message
                </div>
            }

            <div class="form-group">
                <label>User ID</label>
                <InputText @bind-Value="editModel.UserId" class="form-control" readonly />
            </div>

            <div class="form-group">
                <label>Full Name</label>
                <InputText @bind-Value="editModel.Name" class="form-control" />
                <ValidationMessage For="@(() => editModel.Name)" />
            </div>

            <div class="form-group">
                <label>Email Address</label>
                <InputText @bind-Value="editModel.Email" class="form-control" />
                <ValidationMessage For="@(() => editModel.Email)" />
            </div>

            <div class="form-group">
                <label>Role</label>
                <InputSelect @bind-Value="editModel.Role" class="form-select">
                    <option value="">Select Role</option>
                    <option value="1stAdmin">1st Admin</option>
                    <option value="2ndAdmin">2nd Admin</option>
                    <option value="User">User</option>
                </InputSelect>
                <ValidationMessage For="@(() => editModel.Role)" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="editModel.IsActive" class="form-check-input" />
                <label class="form-check-label">Active User</label>
            </div>

            <div class="form-group">
                <label>Reset Password</label>
                <button type="button" class="btn btn-outline-secondary btn-sm"
                        @onclick="ShowResetPassword">
                    <i class="fas fa-key"></i> Reset Password
                </button>
            </div>

            @if (showResetPassword)
            {
                <div class="password-reset-card">
                    <div class="form-group">
                        <label>New Password</label>
                        <InputText type="password" @bind-Value="newPassword" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Confirm Password</label>
                        <InputText type="password" @bind-Value="confirmPassword" class="form-control" />
                    </div>
                    <button type="button" class="btn btn-primary btn-sm"
                            @onclick="ResetPassword" disabled="@(newPassword != confirmPassword)">
                        Update Password
                    </button>
                </div>
            }

            <div class="button-group mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save Changes
                </button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                    <i class="fas fa-trash-alt"></i> Delete User
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int UserId { get; set; }

    private User editModel = new();
    private string message = string.Empty;
    private bool isSuccess;
    private bool showResetPassword;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;

    protected override void OnInitialized()
    {
        var user = UserService.GetAllUsers().FirstOrDefault(u => u.Id == UserId);
        if (user == null)
        {
            Navigation.NavigateTo("/users");
            return;
        }

        editModel = new User
            {
                Id = user.Id,
                UserId = user.UserId,
                Name = user.Name,
                Email = user.Email,
                Role = user.Role,
                IsActive = user.IsActive,
                Password = user.Password
            };
    }

    private void HandleValidSubmit()
    {
        try
        {
            UserService.UpdateUser(editModel);
            message = "User updated successfully!";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            message = $"Error updating user: {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task ResetPassword()
    {
        if (string.IsNullOrEmpty(newPassword) || newPassword != confirmPassword)
        {
            message = "Passwords do not match or are empty";
            isSuccess = false;
            return;
        }

        UserService.UpdatePassword(editModel.Email, newPassword);
        message = "Password updated successfully!";
        isSuccess = true;
        showResetPassword = false;
        newPassword = string.Empty;
        confirmPassword = string.Empty;
    }

    private void ShowResetPassword()
    {
        showResetPassword = !showResetPassword;
        if (!showResetPassword)
        {
            newPassword = string.Empty;
            confirmPassword = string.Empty;
        }
    }

    private async Task ConfirmDelete()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete user {editModel.Name}?");

        if (confirmed)
        {
            UserService.DeleteUser(editModel.Id);
            Navigation.NavigateTo("/users");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/users");
    }
}

<style>
    .edit-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .form-card {
        background: white;
        padding: 25px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-control, .form-select {
        padding: 10px;
        border-radius: 4px;
        border: 1px solid #ced4da;
    }

    .password-reset-card {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 6px;
        margin-bottom: 20px;
        border: 1px solid #dee2e6;
    }

    .button-group {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 16px;
    }

        .btn i {
            margin-right: 5px;
        }
</style>