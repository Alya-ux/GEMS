@page "/forgot-password"
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@inject UserServices UserServices

<EditForm Model="@forgotModel" OnValidSubmit="HandleForgotPassword">
    <DataAnnotationsValidator />
    <div class="login-form">
        <div class="text">Forgot Password</div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">@message</div>
        }

        <div class="field">
            <div class="fa fa-envelope"></div>
            <InputText @bind-Value="forgotModel.Email" placeholder="Enter your email" class="input-field" />
        </div>
        <ValidationMessage For="@(() => forgotModel.Email)" />

        <button class="btn-login" type="submit" disabled="@isProcessing">
            @if (isProcessing)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Sending...</span>
            }
            else
            {
                <span>Send Reset Link</span>
            }
        </button>

        <div class="link">
            Remembered your password? <a href="/">Login</a>
        </div>
    </div>
</EditForm>

@code {
    private ForgotPasswordModel forgotModel = new();
    private string? message;
    private bool isSuccess;
    private bool isProcessing;

    private async Task HandleForgotPassword()
    {
        isProcessing = true;
        try
        {
            // Check if email exists using UserService
            var user = UserServices.GetUserByEmail(forgotModel.Email);

            if (user != null)
            {
                // In a real app, you would:
                // 1. Generate a reset token
                // 2. Send email with reset link
                // 3. Store the token with expiration

                message = $"Password reset link has been sent to {forgotModel.Email}";
                isSuccess = true;

                // Simulate delay for email sending
                await Task.Delay(1500);
            }
            else
            {
                message = "No account found with this email address";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = "An error occurred while processing your request";
            isSuccess = false;
            // Log the exception in a real application
        }
        finally
        {
            isProcessing = false;
        }
    }

    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string? Email { get; set; }
    }
}