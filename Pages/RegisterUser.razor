@page "/register"
@layout MainLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject UserServices UserServices

<div class="registration-container">
    <div class="form-header">
        <h2 class="form-title">
            <i class="fas fa-user-plus me-2"></i>Register New User
        </h2>
    </div>

    <EditForm Model="@newUser" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <div class="form-card">
            <!-- Search User -->
            <div class="form-group">
                <label class="form-label">
                    <i class="fas fa-search me-2"></i>Search Existing User
                </label>
                <div class="search-container">
                    <input type="text" class="form-control"
                           @bind="@searchTerm"
                           @oninput="@PerformLookup"
                           placeholder="Enter name, email or ID..." />
                    @if (filteredUsers.Count > 0)
                    {
                        <div class="dropdown-results">
                            @foreach (var user in filteredUsers)
                            {
                                <div class="dropdown-item" @onclick="@(() => SelectUser(user))">
                                    <div class="user-id-badge">ID: @user.UserId</div>
                                    <div>@user.Name</div>
                                    <small class="text-muted">@user.Email</small>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- User Details -->
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-id-card me-2"></i>User ID
                    </label>
                    <InputText class="form-control" @bind-Value="@newUser.UserId" />
                </div>
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-user me-2"></i>Name
                    </label>
                    <InputText class="form-control" @bind-Value="@newUser.Name" />
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">
                    <i class="fas fa-envelope me-2"></i>Email
                </label>
                <InputText class="form-control" @bind-Value="@newUser.Email" />
            </div>

            <div class="form-group">
                <label class="form-label">
                    <i class="fas fa-user-tag me-2"></i>Role
                </label>
                <InputSelect class="form-select" @bind-Value="@newUser.Role">
                    <option value="">-- Select Role --</option>
                    <option value="1stAdmin">1st Admin</option>
                    <option value="2ndAdmin">2nd Admin</option>
                    <option value="User">User</option>
                </InputSelect>
            </div>

            <button type="submit" class="submit-btn btn-primary">
                <i class="fas fa-user-check me-2"></i>Register User
            </button>
        </div>
    </EditForm>
</div>

@code {
    private RegisterModel newUser = new();
    private string searchTerm = string.Empty;
    private List<LookupUser> filteredUsers = new();

    private List<LookupUser> allUsers = new()
    {
        new LookupUser { UserId = "EMP1001", Name = "Ali Bin Ahmad", Email = "ali@example.com" },
        new LookupUser { UserId = "EMP1002", Name = "Sarah Tan", Email = "sarah@example.com" },
        new LookupUser { UserId = "EMP1003", Name = "John Lee", Email = "johnlee@example.com" },
        new LookupUser { UserId = "EMP1004", Name = "Emma Wong", Email = "emma.wong@example.com" },
        new LookupUser { UserId = "EMP1005", Name = "Michael Chen", Email = "michael@example.com" },
        new LookupUser { UserId = "EMP1006", Name = "Lisa Koh", Email = "lisa.koh@example.com" }
    };

    private void PerformLookup(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        filteredUsers = allUsers
            .Where(u => u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                       u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                       u.UserId.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Take(5)
            .ToList();
    }

    private void SelectUser(LookupUser user)
    {
        newUser.UserId = user.UserId;
        newUser.Name = user.Name;
        newUser.Email = user.Email;
        filteredUsers.Clear();
        searchTerm = string.Empty;
    }

    private void HandleSubmit()
    {
        var newUser = new User
            {
                UserId = this.newUser.UserId,
                Name = this.newUser.Name,
                Email = this.newUser.Email,
                Role = this.newUser.Role,
                Password = "defaultPassword", // You should generate/hash this
                IsActive = true
            };

        UserServices.AddUser(newUser);
        Navigation.NavigateTo("/users");
    }

    public class RegisterModel
    {
        public string UserId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }

    public class LookupUser
    {
        public string UserId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }
}

