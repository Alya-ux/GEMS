@page "/account/editprofile"
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject UserServices UserServices
@using System.ComponentModel.DataAnnotations

<PageTitle>Edit Profile</PageTitle>

<div class="edit-profile-container">
    <div class="profile-header">
        <h2>Edit Profile</h2>
        <p>Update your personal information</p>
    </div>

    @if (user == null)
    {
        <div class="alert alert-info">Loading profile...</div>
    }
    else if (editSuccess)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            Profile updated successfully!
            <button type="button" class="btn-close" @onclick="() => editSuccess = false"></button>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (user != null)
    {
        <div class="profile-form-container">
            <EditForm Model="@user" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="profile-picture-section">
                    <div class="picture-container">
                        <img src="@profileImageUrl" class="profile-picture-large" />
                        <div class="picture-actions">
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="ChangePicture">
                                <i class="fas fa-camera me-2"></i>Change
                            </button>
                            <InputFile id="fileInput" style="display: none;" OnChange="HandleFileUpload" />
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <div class="form-group">
                        <label for="userId">Employee ID</label>
                        <InputText id="userId" @bind-Value="user.Username" class="form-control" disabled />
                    </div>

                    <div class="form-group">
                        <label for="name">Full Name</label>
                        <InputText id="name" @bind-Value="user.Fullname" class="form-control" />
                        <ValidationMessage For="@(() => user.Fullname)" />
                    </div>

                    <div class="form-group">
                        <label for="email">Email Address</label>
                        <InputText id="email" @bind-Value="user.Email" class="form-control" disabled />
                        <small class="text-muted">Contact admin to change email</small>
                    </div>

                    <div class="form-group">
                        <label>Role</label>
                        <InputText @bind-Value="user.Role" class="form-control" disabled />
                    </div>

                    <div class="form-group">
                        <label>Account Status</label>
                        <div class="d-flex align-items-center gap-2">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" @bind="user.IsActive" disabled>
                            </div>
                            <span class="badge @GetStatusBadgeClass(user.Status)">
                                @user.Status.ToString()
                            </span>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>Save Changes
                        </button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                            Cancel
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    }
</div>

<style>
    .edit-profile-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    .profile-header {
        text-align: center;
        margin-bottom: 2rem;
    }

        .profile-header h2 {
            font-weight: 600;
            color: var(--bs-body-color);
        }

    .profile-form-container {
        background-color: var(--bs-body-bg);
        border-radius: 0.5rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        padding: 2rem;
    }

    .profile-picture-section {
        display: flex;
        justify-content: center;
        margin-bottom: 2rem;
    }

    .picture-container {
        text-align: center;
    }

    .profile-picture-large {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid var(--bs-border-color);
        margin-bottom: 1rem;
    }

    .picture-actions {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
    }

    .form-section {
        display: grid;
        gap: 1.5rem;
    }

    .form-group label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
    }

    .badge {
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 700;
    }

    .badge-pending {
        background-color: #ffc107;
        color: #212529;
    }

    .badge-approved {
        background-color: #198754;
        color: white;
    }

    .badge-rejected {
        background-color: #dc3545;
        color: white;
    }

    @@media (max-width: 768px) {
        .profile-form-container {
            padding: 1.5rem;
        }

        .form-actions {
            flex-direction: column;
        }

            .form-actions button {
                width: 100%;
            }
    }
</style>

@code {
    private User? user;
    private bool editSuccess = false;
    private string errorMessage = string.Empty;
    private string? originalEmail;

    private string profileImageUrl = "/Images/profile-picture.png";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            originalEmail = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userEmail");
            if (!string.IsNullOrEmpty(originalEmail))
            {
                user = UserServices.GetUserByEmail(originalEmail);
                if (user == null)
                {
                    errorMessage = "User not found";
                }
                else
                {
                    profileImageUrl = await GetProfilePictureUrl(user.Email);
                }
            }
            else
            {
                errorMessage = "No user email found in session";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            if (user != null)
            {
                UserServices.UpdateUser(user);
                editSuccess = true;
                errorMessage = string.Empty;

                // Update localStorage if name changed
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userFullName", user.Fullname);

                // Small delay before possible navigation
                await Task.Delay(1500);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating profile: {ex.Message}";
            editSuccess = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private async Task ChangePicture()
    {
        await JSRuntime.InvokeVoidAsync("document.getElementById('fileInput').click");
    }


    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null && user != null)
            {
                var imageUrl = await JSRuntime.InvokeAsync<string>("URL.createObjectURL", file);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"profilePicture_{user.Email}", imageUrl);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error uploading image: {ex.Message}";
        }
    }

    private async Task<string> GetProfilePictureUrl(string email)
    {
        var defaultImage = "/Images/profile-picture.png";
        if (string.IsNullOrEmpty(email)) return defaultImage;

        var savedImage = await JSRuntime.InvokeAsync<string>("localStorage.getItem", $"profilePicture_{email}");
        return savedImage ?? defaultImage;
    }


    private string GetStatusBadgeClass(UserStatus status)
    {
        return status switch
        {
            UserStatus.Pending => "badge-pending",
            UserStatus.Approved => "badge-approved",
            UserStatus.Rejected => "badge-rejected",
            _ => ""
        };
    }
}