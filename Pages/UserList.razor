@page "/users"
@layout MainLayout
@inject NavigationManager Navigation
@inject UserServices UserServices
@inject IJSRuntime JsRuntime

<div class="user-list-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="page-title mb-0">User List</h3>
        <button class="btn btn-primary register-btn" @onclick="NavigateToRegister">
            <i class="fas fa-user-plus me-1"></i>Register
        </button>
    </div>

    <div class="search-filter-bar mb-3">
        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" class="form-control"
                   placeholder="Search users..."
                   @bind="searchTerm"
                   @oninput="() => ApplyFilters()" />
        </div>
        <select class="form-select" @bind="roleFilter" style="width:150px">
            <option value="">All Roles</option>
            <option value="1stAdmin">1st Admin</option>
            <option value="2ndAdmin">2nd Admin</option>
            <option value="User">User</option>
        </select>
    </div>

    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Status</th>
                    <th style="width:120px">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in filteredUsers)
                {
                    <tr>
                        <td>@user.UserId</td>
                        <td>@user.Name</td>
                        <td>@user.Email</td>
                        <td>
                            <span class="badge @GetRoleBadgeClass(user.Role)">
                                @GetRoleDisplay(user.Role)
                            </span>
                        </td>
                        <td>
                            <span class="badge @(user.IsActive ? "bg-success" : "bg-danger")">
                                @(user.IsActive ? "Active" : "Inactive")
                            </span>
                        </td>
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-light dropdown-toggle"
                                        type="button"
                                        id="actionsDropdown-@user.Id"
                                        data-bs-toggle="dropdown"
                                        aria-expanded="false">
                                    Actions
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="actionsDropdown-@user.Id">
                                    <li>
                                        <button class="dropdown-item" @onclick="() => EditUser(user.Id)">
                                            <i class="fas fa-edit text-primary me-2"></i>Edit
                                        </button>
                                    </li>
                                    <li>
                                        <button class="dropdown-item" @onclick="() => ToggleUserStatus(user.Id)">
                                            <i class="fas @(user.IsActive ? "fa-user-slash text-danger" : "fa-user-check text-success") me-2"></i>
                                                @(user.IsActive ? "Deactivate" : "Activate")
                                        </button>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <button class="dropdown-item text-danger" @onclick="async () => await DeleteUser(user.Id)">
                                            <i class="fas fa-trash-alt me-2"></i>Delete
                                        </button>
                                    </li>
                                </ul>
                            </div>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<User> filteredUsers = new();
    private string searchTerm = string.Empty;
    private string roleFilter = string.Empty;

    protected override void OnInitialized()
    {
        filteredUsers = UserServices.GetAllUsers();
    }

    protected override void OnParametersSet()
    {
        ApplyFilters(); // This will run whenever roleFilter changes
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }


    private void EditUser(int userId)
    {
        Navigation.NavigateTo($"/users/edit/{userId}");
    }

    private async Task DeleteUser(int userId)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm",
            "Are you sure you want to delete this user?");

        if (confirmed)
        {
            UserServices.DeleteUser(userId);
            filteredUsers = UserServices.GetAllUsers();
            StateHasChanged(); // Refresh the UI
        }
    }


    private void ToggleUserStatus(int userId)
    {
        UserServices.ToggleUserStatus(userId);
        filteredUsers = UserServices.GetAllUsers(); // Refresh the list
    }

    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "1stAdmin" => "bg-primary",
            "2ndAdmin" => "bg-info text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetRoleDisplay(string role)
    {
        return role switch
        {
            "1stAdmin" => "1st Admin",
            "2ndAdmin" => "2nd Admin",
            _ => "User"
        };
    }
    private void ApplyFilters()
    {
        var filtered = UserServices.GetAllUsers();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(u =>
                u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.UserId.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (!string.IsNullOrEmpty(roleFilter))
        {
            filtered = filtered.Where(u => u.Role == roleFilter).ToList();
        }

        filteredUsers = filtered;
    }

}

